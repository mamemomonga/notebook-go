// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SouHouKouClient is the client API for SouHouKou service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SouHouKouClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (SouHouKou_ChatClient, error)
}

type souHouKouClient struct {
	cc grpc.ClientConnInterface
}

func NewSouHouKouClient(cc grpc.ClientConnInterface) SouHouKouClient {
	return &souHouKouClient{cc}
}

func (c *souHouKouClient) Chat(ctx context.Context, opts ...grpc.CallOption) (SouHouKou_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &SouHouKou_ServiceDesc.Streams[0], "/helloworld.SouHouKou/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &souHouKouChatClient{stream}
	return x, nil
}

type SouHouKou_ChatClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatReply, error)
	grpc.ClientStream
}

type souHouKouChatClient struct {
	grpc.ClientStream
}

func (x *souHouKouChatClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *souHouKouChatClient) Recv() (*ChatReply, error) {
	m := new(ChatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SouHouKouServer is the server API for SouHouKou service.
// All implementations must embed UnimplementedSouHouKouServer
// for forward compatibility
type SouHouKouServer interface {
	Chat(SouHouKou_ChatServer) error
	mustEmbedUnimplementedSouHouKouServer()
}

// UnimplementedSouHouKouServer must be embedded to have forward compatible implementations.
type UnimplementedSouHouKouServer struct {
}

func (UnimplementedSouHouKouServer) Chat(SouHouKou_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedSouHouKouServer) mustEmbedUnimplementedSouHouKouServer() {}

// UnsafeSouHouKouServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SouHouKouServer will
// result in compilation errors.
type UnsafeSouHouKouServer interface {
	mustEmbedUnimplementedSouHouKouServer()
}

func RegisterSouHouKouServer(s grpc.ServiceRegistrar, srv SouHouKouServer) {
	s.RegisterService(&SouHouKou_ServiceDesc, srv)
}

func _SouHouKou_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SouHouKouServer).Chat(&souHouKouChatServer{stream})
}

type SouHouKou_ChatServer interface {
	Send(*ChatReply) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type souHouKouChatServer struct {
	grpc.ServerStream
}

func (x *souHouKouChatServer) Send(m *ChatReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *souHouKouChatServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SouHouKou_ServiceDesc is the grpc.ServiceDesc for SouHouKou service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SouHouKou_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.SouHouKou",
	HandlerType: (*SouHouKouServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _SouHouKou_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "souhoukou.proto",
}
